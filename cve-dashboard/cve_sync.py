import requests
import time
import json
from database import insert_or_update_cve
from datetime import datetime

def fetch_cves_from_nvd(start_index=0, results_per_page=2000):
    """Fetch CVEs from NVD API with pagination"""
    base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    
    params = {
        'startIndex': start_index,
        'resultsPerPage': results_per_page
    }
    
    try:
        response = requests.get(base_url, params=params, timeout=30)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        print(f"Error fetching data from NVD: {e}")
        return None

def parse_cve_data(cve_item):
    """Parse CVE data from NVD response"""
    cve_id = cve_item.get('id', '')
    
    # Extract description
    descriptions = cve_item.get('descriptions', [])
    description = next((desc['value'] for desc in descriptions if desc['lang'] == 'en'), '')
    
    # Extract dates
    published_date = cve_item.get('published', '')
    last_modified_date = cve_item.get('lastModified', '')
    
    # Extract CVSS metrics
    cvss_v2_score = None
    cvss_v2_severity = None
    cvss_v2_vector = None
    cvss_v3_score = None
    cvss_v3_severity = None
    cvss_v3_vector = None
    
    metrics = cve_item.get('metrics', {})
    
    # CVSS v2 metrics
    if 'cvssMetricV2' in metrics and metrics['cvssMetricV2']:
        cvss_v2 = metrics['cvssMetricV2'][0]['cvssData']
        cvss_v2_score = cvss_v2.get('baseScore')
        cvss_v2_severity = metrics['cvssMetricV2'][0].get('baseSeverity')
        cvss_v2_vector = cvss_v2.get('vectorString')
    
    # CVSS v3 metrics
    if 'cvssMetricV30' in metrics and metrics['cvssMetricV30']:
        cvss_v3 = metrics['cvssMetricV30'][0]['cvssData']
        cvss_v3_score = cvss_v3.get('baseScore')
        cvss_v3_severity = metrics['cvssMetricV30'][0].get('baseSeverity')
        cvss_v3_vector = cvss_v3.get('vectorString')
    elif 'cvssMetricV31' in metrics and metrics['cvssMetricV31']:
        cvss_v3 = metrics['cvssMetricV31'][0]['cvssData']
        cvss_v3_score = cvss_v3.get('baseScore')
        cvss_v3_severity = metrics['cvssMetricV31'][0].get('baseSeverity')
        cvss_v3_vector = cvss_v3.get('vectorString')
    
    # Extract CPE match criteria
    cpe_match_criteria = []
    cpe_match_vulnerable = []
    
    configurations = cve_item.get('configurations', [])
    for config in configurations:
        nodes = config.get('nodes', [])
        for node in nodes:
            cpe_matches = node.get('cpeMatch', [])
            for cpe_match in cpe_matches:
                criteria = cpe_match.get('criteria', '')
                vulnerable = cpe_match.get('vulnerable', False)
                cpe_match_criteria.append(criteria)
                if vulnerable:
                    cpe_match_vulnerable.append(criteria)
    
    return {
        'id': cve_id,
        'description': description,
        'published_date': published_date,
        'last_modified_date': last_modified_date,
        'cvss_v2_score': cvss_v2_score,
        'cvss_v3_score': cvss_v3_score,
        'cvss_v2_severity': cvss_v2_severity,
        'cvss_v3_severity': cvss_v3_severity,
        'cvss_v2_vector': cvss_v2_vector,
        'cvss_v3_vector': cvss_v3_vector,
        'cpe_match_criteria': json.dumps(cpe_match_criteria),
        'cpe_match_vulnerable': json.dumps(cpe_match_vulnerable),
        'raw_data': cve_item
    }

def sync_cves():
    """Synchronize all CVEs from NVD to local database"""
    print("Starting CVE synchronization...")
    start_index = 0
    results_per_page = 2000
    total_processed = 0
    
    while True:
        print(f"Fetching CVEs from index {start_index}...")
        data = fetch_cves_from_nvd(start_index, results_per_page)
        
        if not data or 'vulnerabilities' not in data:
            print("No more data to fetch or error occurred.")
            break
        
        cves = data['vulnerabilities']
        if not cves:
            print("No CVEs found in response.")
            break
        
        for cve_item in cves:
            cve_data = parse_cve_data(cve_item['cve'])
            insert_or_update_cve(cve_data)
        
        total_processed += len(cves)
        print(f"Processed {len(cves)} CVEs. Total: {total_processed}")
        
        # Check if we've fetched all available CVEs
        total_results = data.get('totalResults', 0)
        if start_index + results_per_page >= total_results:
            break
            
        start_index += results_per_page
        # Be respectful to the API - add a small delay
        time.sleep(1)
    
    print(f"CVE synchronization completed. Total processed: {total_processed}")

if __name__ == '__main__':
    sync_cves()