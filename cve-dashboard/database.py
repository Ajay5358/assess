import sqlite3
import json
from datetime import datetime, timedelta

def init_db(db_path):
    """Initialize the SQLite database with CVE table"""
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS cves (
        id TEXT PRIMARY KEY,
        description TEXT,
        published_date TEXT,
        last_modified_date TEXT,
        cvss_v2_score REAL,
        cvss_v3_score REAL,
        cvss_v2_severity TEXT,
        cvss_v3_severity TEXT,
        cvss_v2_vector TEXT,
        cvss_v3_vector TEXT,
        cpe_match_criteria TEXT,
        cpe_match_vulnerable TEXT,
        raw_data TEXT
    )
    ''')
    
    conn.commit()
    conn.close()

def get_all_cves(limit=10, offset=0, year=None, min_score=None, max_score=None, 
                 last_modified_days=None, sort_by='last_modified_date', sort_order='desc'):
    """Get all CVEs with optional filtering and pagination"""
    conn = sqlite3.connect('cve_database.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    # Build query with filters
    query = "SELECT * FROM cves WHERE 1=1"
    params = []
    
    if year:
        query += " AND id LIKE ?"
        params.append(f'CVE-{year}-%')
    
    if min_score is not None:
        query += " AND (cvss_v2_score >= ? OR cvss_v3_score >= ?)"
        params.extend([min_score, min_score])
    
    if max_score is not None:
        query += " AND (cvss_v2_score <= ? OR cvss_v3_score <= ?)"
        params.extend([max_score, max_score])
    
    if last_modified_days:
        cutoff_date = (datetime.now() - timedelta(days=int(last_modified_days))).strftime('%Y-%m-%dT%H:%M:%S')
        query += " AND last_modified_date >= ?"
        params.append(cutoff_date)
    
    # Add sorting
    valid_sort_columns = ['id', 'published_date', 'last_modified_date', 'cvss_v2_score', 'cvss_v3_score']
    if sort_by not in valid_sort_columns:
        sort_by = 'last_modified_date'
    
    sort_order = 'DESC' if sort_order.lower() == 'desc' else 'ASC'
    query += f" ORDER BY {sort_by} {sort_order}"
    
    # Add pagination
    query += " LIMIT ? OFFSET ?"
    params.extend([limit, offset])
    
    cursor.execute(query, params)
    cves = [dict(row) for row in cursor.fetchall()]
    
    # Get total count for pagination
    count_query = "SELECT COUNT(*) FROM cves WHERE 1=1"
    count_params = []
    
    if year:
        count_query += " AND id LIKE ?"
        count_params.append(f'CVE-{year}-%')
    
    if min_score is not None:
        count_query += " AND (cvss_v2_score >= ? OR cvss_v3_score >= ?)"
        count_params.extend([min_score, min_score])
    
    if max_score is not None:
        count_query += " AND (cvss_v2_score <= ? OR cvss_v3_score <= ?)"
        count_params.extend([max_score, max_score])
    
    if last_modified_days:
        count_query += " AND last_modified_date >= ?"
        count_params.append(cutoff_date)
    
    cursor.execute(count_query, count_params)
    total_count = cursor.fetchone()[0]
    
    conn.close()
    return cves, total_count

def get_cve_by_id(cve_id):
    """Get a specific CVE by ID"""
    conn = sqlite3.connect('cve_database.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM cves WHERE id = ?", (cve_id,))
    result = cursor.fetchone()
    
    conn.close()
    return dict(result) if result else None

def get_cves_by_year(year):
    """Get all CVEs for a specific year"""
    conn = sqlite3.connect('cve_database.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM cves WHERE id LIKE ?", (f'CVE-{year}-%',))
    cves = [dict(row) for row in cursor.fetchall()]
    
    conn.close()
    return cves

def get_cves_by_score(min_score, max_score):
    """Get CVEs within a score range"""
    conn = sqlite3.connect('cve_database.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT * FROM cves 
        WHERE (cvss_v2_score BETWEEN ? AND ?) 
           OR (cvss_v3_score BETWEEN ? AND ?)
    """, (min_score, max_score, min_score, max_score))
    
    cves = [dict(row) for row in cursor.fetchall()]
    conn.close()
    return cves

def get_cves_modified_in_days(days):
    """Get CVEs modified in the last N days"""
    conn = sqlite3.connect('cve_database.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    cutoff_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%dT%H:%M:%S')
    cursor.execute("SELECT * FROM cves WHERE last_modified_date >= ?", (cutoff_date,))
    
    cves = [dict(row) for row in cursor.fetchall()]
    conn.close()
    return cves

def insert_or_update_cve(cve_data):
    """Insert or update a CVE record"""
    conn = sqlite3.connect('cve_database.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT OR REPLACE INTO cves 
    (id, description, published_date, last_modified_date, cvss_v2_score, cvss_v3_score, 
     cvss_v2_severity, cvss_v3_severity, cvss_v2_vector, cvss_v3_vector, 
     cpe_match_criteria, cpe_match_vulnerable, raw_data)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        cve_data.get('id'),
        cve_data.get('description'),
        cve_data.get('published_date'),
        cve_data.get('last_modified_date'),
        cve_data.get('cvss_v2_score'),
        cve_data.get('cvss_v3_score'),
        cve_data.get('cvss_v2_severity'),
        cve_data.get('cvss_v3_severity'),
        cve_data.get('cvss_v2_vector'),
        cve_data.get('cvss_v3_vector'),
        cve_data.get('cpe_match_criteria'),
        cve_data.get('cpe_match_vulnerable'),
        json.dumps(cve_data.get('raw_data', {}))
    ))
    
    conn.commit()
    conn.close()