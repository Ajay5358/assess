class CVEManager {
    constructor() {
        this.currentPage = 1;
        this.perPage = 10;
        this.totalPages = 1;
        this.totalCount = 0;
        this.currentFilters = {};
        this.currentSort = { field: 'last_modified_date', order: 'desc' };
        
        console.log('CVE Manager initialized');
        this.initializeEventListeners();
        this.loadCVEs();
    }

    initializeEventListeners() {
        console.log('Initializing event listeners...');
        
        // Pagination
        const prevButton = document.getElementById('prev-page');
        const nextButton = document.getElementById('next-page');
        
        if (prevButton) {
            prevButton.addEventListener('click', () => this.previousPage());
        }
        if (nextButton) {
            nextButton.addEventListener('click', () => this.nextPage());
        }
        
        // Results per page
        const perPageSelect = document.getElementById('per-page-select');
        if (perPageSelect) {
            perPageSelect.addEventListener('change', (e) => {
                this.perPage = parseInt(e.target.value);
                this.currentPage = 1;
                this.loadCVEs();
            });
        }
        
        // Apply filters
        const applyFilters = document.getElementById('apply-filters');
        const clearFilters = document.getElementById('clear-filters');
        
        if (applyFilters) {
            applyFilters.addEventListener('click', () => this.applyFilters());
        }
        if (clearFilters) {
            clearFilters.addEventListener('click', () => this.clearFilters());
        }
        
        // Table sorting
        const tableHeaders = document.querySelectorAll('th[data-sort]');
        tableHeaders.forEach(header => {
            header.addEventListener('click', () => {
                const field = header.getAttribute('data-sort');
                this.sortTable(field);
            });
        });
        
        // Enter key in filter inputs
        const filterInputs = document.querySelectorAll('.filters input');
        filterInputs.forEach(input => {
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.applyFilters();
                }
            });
        });
    }

    async loadCVEs() {
        console.log('Loading CVEs...', {
            page: this.currentPage,
            perPage: this.perPage,
            filters: this.currentFilters
        });
        
        try {
            this.showLoading();
            
            const params = new URLSearchParams({
                page: this.currentPage.toString(),
                per_page: this.perPage.toString(),
                sort_by: this.currentSort.field,
                sort_order: this.currentSort.order
            });
            
            // Add filters to params
            Object.entries(this.currentFilters).forEach(([key, value]) => {
                if (value) params.append(key, value.toString());
            });
            
            console.log('Fetching from:', `/api/cves?${params}`);
            
            const response = await fetch(`/api/cves?${params}`);
            console.log('Response status:', response.status);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('Received data:', data);
            
            this.displayCVEs(data.cves);
            this.updatePagination(data.total_count, data.page, data.per_page);
            
        } catch (error) {
            console.error('Error loading CVEs:', error);
            this.showError(error.message);
        }
    }

    displayCVEs(cves) {
        const tbody = document.getElementById('cves-table-body');
        if (!tbody) {
            console.error('Table body element not found');
            return;
        }
        
        console.log('Displaying CVEs:', cves);
        
        if (!cves || cves.length === 0) {
            tbody.innerHTML = '<tr><td colspan="5" style="text-align: center; padding: 20px;">No CVEs found</td></tr>';
            return;
        }
        
        tbody.innerHTML = cves.map(cve => `
            <tr onclick="window.location.href='/cves/${cve.id}'" style="cursor: pointer;">
                <td><strong>${this.escapeHtml(cve.id)}</strong></td>
                <td>${this.escapeHtml(this.truncateText(cve.description, 100))}</td>
                <td>${this.formatScore(cve.cvss_v2_score, cve.cvss_v2_severity)}</td>
                <td>${this.formatScore(cve.cvss_v3_score, cve.cvss_v3_severity)}</td>
                <td>${this.formatDate(cve.last_modified_date)}</td>
            </tr>
        `).join('');
    }

    escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    formatScore(score, severity) {
        if (score === null || score === undefined) return 'N/A';
        
        let severityClass = 'severity-low';
        if (score >= 7) severityClass = 'severity-high';
        else if (score >= 4) severityClass = 'severity-medium';
        
        return `<span class="${severityClass}">${score} ${severity ? `(${severity})` : ''}</span>`;
    }

    formatDate(dateString) {
        if (!dateString) return 'N/A';
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString();
        } catch (e) {
            return 'Invalid Date';
        }
    }

    truncateText(text, maxLength) {
        if (!text) return 'No description available';
        if (text.length <= maxLength) return text;
        return text.substring(0, maxLength) + '...';
    }

    updatePagination(totalCount, currentPage, perPage) {
        console.log('Updating pagination:', { totalCount, currentPage, perPage });
        
        this.totalCount = totalCount;
        this.totalPages = Math.ceil(totalCount / perPage);
        
        const pageInfo = document.getElementById('page-info');
        const prevButton = document.getElementById('prev-page');
        const nextButton = document.getElementById('next-page');
        const totalCountElement = document.getElementById('total-count');
        
        if (pageInfo) {
            pageInfo.textContent = `Page ${currentPage} of ${this.totalPages || 1}`;
        }
        
        if (prevButton) {
            prevButton.disabled = currentPage <= 1;
        }
        
        if (nextButton) {
            nextButton.disabled = currentPage >= this.totalPages;
        }
        
        if (totalCountElement) {
            totalCountElement.textContent = totalCount || 0;
        }
    }

    previousPage() {
        if (this.currentPage > 1) {
            this.currentPage--;
            this.loadCVEs();
        }
    }

    nextPage() {
        if (this.currentPage < this.totalPages) {
            this.currentPage++;
            this.loadCVEs();
        }
    }

    applyFilters() {
        console.log('Applying filters...');
        this.currentFilters = {};
        this.currentPage = 1;
        
        const year = document.getElementById('year-filter')?.value;
        const minScore = document.getElementById('min-score')?.value;
        const maxScore = document.getElementById('max-score')?.value;
        const lastModified = document.getElementById('last-modified')?.value;
        
        if (year) this.currentFilters.year = year;
        if (minScore) this.currentFilters.min_score = minScore;
        if (maxScore) this.currentFilters.max_score = maxScore;
        if (lastModified) this.currentFilters.last_modified_days = lastModified;
        
        console.log('Current filters:', this.currentFilters);
        this.loadCVEs();
    }

    clearFilters() {
        console.log('Clearing filters...');
        
        document.getElementById('year-filter').value = '';
        document.getElementById('min-score').value = '';
        document.getElementById('max-score').value = '';
        document.getElementById('last-modified').value = '';
        
        this.currentFilters = {};
        this.currentPage = 1;
        this.loadCVEs();
    }

    sortTable(field) {
        console.log('Sorting by:', field);
        
        // Toggle sort order if clicking the same field
        if (this.currentSort.field === field) {
            this.currentSort.order = this.currentSort.order === 'asc' ? 'desc' : 'asc';
        } else {
            this.currentSort.field = field;
            this.currentSort.order = 'desc';
        }
        
        this.loadCVEs();
    }

    showLoading() {
        const tbody = document.getElementById('cves-table-body');
        if (tbody) {
            tbody.innerHTML = '<tr><td colspan="5" style="text-align: center; padding: 20px;">Loading CVEs...</td></tr>';
        }
    }

    showError(message) {
        const tbody = document.getElementById('cves-table-body');
        if (tbody) {
            tbody.innerHTML = `<tr><td colspan="5" style="text-align: center; color: #e74c3c; padding: 20px;">Error: ${message}</td></tr>`;
        }
    }
}

// CVE Details functionality
async function loadCVEDetails(cveId) {
    try {
        console.log('Loading CVE details for:', cveId);
        const response = await fetch(`/api/cves/${cveId}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const cve = await response.json();
        displayCVEDetails(cve);
        
    } catch (error) {
        console.error('Error loading CVE details:', error);
        const container = document.getElementById('cve-details');
        if (container) {
            container.innerHTML = `
                <div class="error">Error loading CVE details: ${error.message}</div>
            `;
        }
    }
}

function displayCVEDetails(cve) {
    const container = document.getElementById('cve-details');
    if (!container) return;
    
    // Parse CPE data safely
    let vulnerableCpes = [];
    try {
        if (cve.cpe_match_vulnerable && cve.cpe_match_vulnerable !== '[]') {
            vulnerableCpes = JSON.parse(cve.cpe_match_vulnerable);
        }
    } catch (e) {
        console.error('Error parsing CPE data:', e);
    }
    
    container.innerHTML = `
        <div class="cve-detail-card">
            <div class="detail-section">
                <h3>Basic Information</h3>
                <div class="detail-row">
                    <div class="detail-label">CVE ID:</div>
                    <div class="detail-value"><strong>${escapeHtml(cve.id)}</strong></div>
                </div>
                <div class="detail-row">
                    <div class="detail-label">Description:</div>
                    <div class="detail-value">${escapeHtml(cve.description || 'N/A')}</div>
                </div>
                <div class="detail-row">
                    <div class="detail-label">Published Date:</div>
                    <div class="detail-value">${formatDetailedDate(cve.published_date)}</div>
                </div>
                <div class="detail-row">
                    <div class="detail-label">Last Modified:</div>
                    <div class="detail-value">${formatDetailedDate(cve.last_modified_date)}</div>
                </div>
            </div>

            <div class="detail-section">
                <h3>CVSS Scores</h3>
                <div class="detail-row">
                    <div class="detail-label">CVSS v2 Score:</div>
                    <div class="detail-value">${formatDetailScore(cve.cvss_v2_score, cve.cvss_v2_severity)}</div>
                </div>
                <div class="detail-row">
                    <div class="detail-label">CVSS v2 Vector:</div>
                    <div class="detail-value">${escapeHtml(cve.cvss_v2_vector || 'N/A')}</div>
                </div>
                <div class="detail-row">
                    <div class="detail-label">CVSS v3 Score:</div>
                    <div class="detail-value">${formatDetailScore(cve.cvss_v3_score, cve.cvss_v3_severity)}</div>
                </div>
                <div class="detail-row">
                    <div class="detail-label">CVSS v3 Vector:</div>
                    <div class="detail-value">${escapeHtml(cve.cvss_v3_vector || 'N/A')}</div>
                </div>
            </div>

            ${vulnerableCpes.length > 0 ? `
            <div class="detail-section">
                <h3>Affected Products</h3>
                <div class="detail-row">
                    <div class="detail-label">Vulnerable CPEs:</div>
                    <div class="detail-value">
                        <ul style="max-height: 200px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; border-radius: 4px;">
                            ${vulnerableCpes.map(cpe => `<li style="margin-bottom: 5px; font-family: monospace; font-size: 0.9em;">${escapeHtml(cpe)}</li>`).join('')}
                        </ul>
                    </div>
                </div>
            </div>
            ` : ''}
        </div>
    `;
}

// Utility functions
function escapeHtml(text) {
    if (!text) return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function formatDetailedDate(dateString) {
    if (!dateString) return 'N/A';
    try {
        const date = new Date(dateString);
        return date.toLocaleString();
    } catch (e) {
        return 'Invalid Date';
    }
}

function formatDetailScore(score, severity) {
    if (score === null || score === undefined) return 'N/A';
    
    let severityClass = 'severity-low';
    if (score >= 7) severityClass = 'severity-high';
    else if (score >= 4) severityClass = 'severity-medium';
    
    return `<span class="${severityClass}">${score} ${severity ? `(${severity})` : ''}</span>`;
}

// Initialize the CVE Manager when the page loads
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing CVE Manager...');
    
    // Only initialize on the list page
    if (document.getElementById('cves-table-body')) {
        window.cveManager = new CVEManager();
    }
    
    // Initialize CVE details if on detail page
    if (document.getElementById('cve-details')) {
        const cveId = window.location.pathname.split('/').pop();
        if (cveId && cveId.startsWith('CVE-')) {
            loadCVEDetails(cveId);
        }
    }
});